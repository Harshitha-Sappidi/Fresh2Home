/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.customerRole;

import business.Business;
import business.SendEmail;
import business.customer.Cart;
import business.customer.Order;
import business.enterprise.Enterprise;
import business.enterprise.SalesAndDeliveryEnterprise;
import business.network.Network;
import business.organization.DeliveryOrganization;
import business.organization.Organization;
import business.person.Person;
import business.products.Product;
import business.userAccount.UserAccount;
import business.workQueue.DeliveryWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author harshitha
 */
public class ViewCertifiedProductsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewHomeAddressJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private Business business;
    private Network network;
    private Enterprise enterprise;
    private Cart cart;
    private static boolean checkout = false;

    public ViewCertifiedProductsJPanel(JPanel userProcessContainer, UserAccount account, Business business, Network network, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.business = business;
        this.network = network;
        this.cart = new Cart(account.getUsername());
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblViewProducts.getModel();
        model.setRowCount(0);

        ArrayList<Product> ProductList = business.getProductDirectory().getProductList();
        for (Product product : ProductList) {
            Product.Status status = product.getStatus();
            if (status.toString().equalsIgnoreCase(Product.Status.REVIEWED.toString())) {
                Object[] row = new Object[7];
                String productName = product.getName();
                int productId = product.getProductId();
                double price = product.getOfferedPrice();
                int quantity = product.getQuantity();

                double EstimationCost = business.getProductDirectory().calculateEstimationCost(price, quantity);

                row[0] = productId;
                row[1] = productName;
                row[2] = price;
                row[3] = quantity;
                row[4] = product.getImage();

                model.addRow(row);
                tblViewProducts.setRowHeight(150);
            }
        }
        tblViewProducts.getColumnModel().getColumn(4).setCellRenderer(new ImageRenderer());
        tblViewProducts.setModel(model);
        tblViewProducts.setPreferredScrollableViewportSize(new Dimension(tblViewProducts.getPreferredScrollableViewportSize().width, 150));
        tblViewProducts.revalidate();
    }

    private class ImageRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            //ImageIcon imageIcon = new ImageIcon(product.getImage().getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH));
            ImageIcon imageIcon = new ImageIcon(((ImageIcon) value).getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH));
            return new JLabel(imageIcon);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblViewProducts = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        lblQuantity = new javax.swing.JLabel();
        btnCheckOut = new javax.swing.JButton();
        spnQuantity = new javax.swing.JSpinner();
        btnAddToCart = new javax.swing.JButton();
        lblItemsInCart = new javax.swing.JLabel();
        lbltotalamount = new javax.swing.JLabel();
        txttotalamount = new javax.swing.JTextField();
        modifyQuantity = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        lblTitle1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        StatusCmbBox = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(0, 84, 118));

        lblTitle.setFont(new java.awt.Font("Khmer MN", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 153, 0));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/icons8-return-purchase-80.png"))); // NOI18N
        lblTitle.setText("Cart Items");
        lblTitle.setToolTipText("");

        tblViewProducts.setBackground(new java.awt.Color(153, 204, 255));
        tblViewProducts.setFont(new java.awt.Font("Khmer MN", 0, 18)); // NOI18N
        tblViewProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProductID", "Product Name ", "Price (/lb)", "Quantity(lbs)", "Image"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblViewProducts);

        tblCart.setBackground(new java.awt.Color(153, 204, 255));
        tblCart.setFont(new java.awt.Font("Khmer MN", 0, 18)); // NOI18N
        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Name", "Price", "Quantity", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblCart);

        btnModifyQuantity.setBackground(new java.awt.Color(255, 153, 0));
        btnModifyQuantity.setFont(new java.awt.Font("Khmer MN", 0, 18)); // NOI18N
        btnModifyQuantity.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/icons8-add-30.png"))); // NOI18N
        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        btnRemoveOrderItem.setBackground(new java.awt.Color(255, 153, 0));
        btnRemoveOrderItem.setFont(new java.awt.Font("Khmer MN", 0, 18)); // NOI18N
        btnRemoveOrderItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/icons8-shopping-basket-remove-40.png"))); // NOI18N
        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        lblQuantity.setFont(new java.awt.Font("Khmer MN", 0, 18)); // NOI18N
        lblQuantity.setForeground(new java.awt.Color(153, 204, 255));
        lblQuantity.setText("Quantity :");

        btnCheckOut.setBackground(new java.awt.Color(255, 153, 0));
        btnCheckOut.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        btnCheckOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/icons8-buy-for-change-40.png"))); // NOI18N
        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        spnQuantity.setFont(new java.awt.Font("Khmer MN", 0, 18)); // NOI18N
        spnQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        btnAddToCart.setBackground(new java.awt.Color(255, 153, 0));
        btnAddToCart.setFont(new java.awt.Font("Khmer MN", 1, 18)); // NOI18N
        btnAddToCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/icons8-add-shopping-cart-40.png"))); // NOI18N
        btnAddToCart.setText("Add to Cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        lblItemsInCart.setFont(new java.awt.Font("Khmer MN", 0, 18)); // NOI18N
        lblItemsInCart.setForeground(new java.awt.Color(153, 204, 255));
        lblItemsInCart.setText("Items in cart :");

        lbltotalamount.setFont(new java.awt.Font("Khmer MN", 0, 18)); // NOI18N
        lbltotalamount.setForeground(new java.awt.Color(255, 153, 51));
        lbltotalamount.setText("Total Amount :");

        txttotalamount.setFont(new java.awt.Font("Khmer MN", 0, 18)); // NOI18N

        modifyQuantity.setFont(new java.awt.Font("Khmer MN", 0, 18)); // NOI18N
        modifyQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/shopping cart.png"))); // NOI18N

        lblTitle1.setFont(new java.awt.Font("Khmer MN", 1, 24)); // NOI18N
        lblTitle1.setForeground(new java.awt.Color(255, 153, 0));
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/icons8-certified-94.png"))); // NOI18N
        lblTitle1.setText("View Certified Products");
        lblTitle1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Khmer MN", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 102));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/icons8-back-button-30.png"))); // NOI18N
        jLabel2.setText("Back");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(255, 204, 204));
        btnSearch.setFont(new java.awt.Font("Khmer MN", 1, 18)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/search-30.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        StatusCmbBox.setBackground(new java.awt.Color(255, 204, 204));
        StatusCmbBox.setFont(new java.awt.Font("Khmer MN", 1, 18)); // NOI18N
        StatusCmbBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort", "Vegetable", "Fruit", "Honey", "Herbs and Spices", "Price(low-high)", "Price(high-low)", " " }));
        StatusCmbBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusCmbBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(lblQuantity)
                        .addGap(18, 18, 18)
                        .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblItemsInCart)
                        .addGap(12, 12, 12)
                        .addComponent(btnAddToCart)))
                .addContainerGap(257, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(204, 204, 204))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txttotalamount, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lbltotalamount, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnModifyQuantity)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(modifyQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(236, 236, 236)
                                .addComponent(btnRemoveOrderItem, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(75, 75, 75)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 1311, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(StatusCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblQuantity)
                            .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddToCart)
                            .addComponent(lblItemsInCart))
                        .addGap(107, 107, 107))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(StatusCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modifyQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModifyQuantity)
                            .addComponent(btnRemoveOrderItem))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txttotalamount, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbltotalamount, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(208, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int oldQuantityFromCart = 0;
        int selectedRowIndex = tblCart.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a product item.");
            return;
        }
        int productID = (int) tblCart.getValueAt(selectedRowIndex, 0);
        Product product = business.getProductDirectory().getProductFromProductID(productID);
        int quantityModify = (Integer) modifyQuantity.getValue();

        if (quantityModify == 0) {
            JOptionPane.showMessageDialog(this, "Please add modify quantity greater than '0' or Select the items and remove from cart.");
            return;
        } else if (quantityModify > product.getQuantity()) {
            JOptionPane.showMessageDialog(this, "The Quantity choosen is more than the available quantity. Please update the quantity.");
            return;
        } else {
            Product prodFromMap = cart.getProductMap().get(product.getProductId());
            oldQuantityFromCart = prodFromMap.getQuantity();
            prodFromMap.setQuantity(quantityModify);
        }
        product.setQuantity(product.getQuantity() + oldQuantityFromCart - quantityModify);

        populateTable();
        populateCartTable(cart);

        modifyQuantity.setValue(0);

    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int[] selectedRows = tblCart.getSelectedRows();
        if (selectedRows.length > 0) {
            int dialogueButton = JOptionPane.YES_NO_OPTION;
            int dialogueResult = JOptionPane.showConfirmDialog(null, "Would you like to delete the items?", "Warning", dialogueButton);
            if (dialogueResult == JOptionPane.YES_OPTION) {
                for (int selectedRow : selectedRows) {
                    int productID = (int) tblCart.getValueAt(selectedRow, 0);
                    Product product = business.getProductDirectory().getProductFromProductID(productID);
                    product.setQuantity(product.getQuantity() + cart.getProductMap().get(productID).getQuantity());
                    cart.getProductMap().remove(productID);
                }
                populateTable();
                populateCartTable(cart);
            }
        } else {
            JOptionPane.showConfirmDialog(null, "Please select an item to remove.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:

        if (account.getPerson().getWallet().getBalance() >= Double.valueOf(txttotalamount.getText())) {
            System.out.println("entered checkout");
            checkout = true;
            Order order = new Order(account.getUsername(), new Date(), !txttotalamount.getText().isEmpty() ? Double.valueOf(txttotalamount.getText()) : 0, DeliveryWorkRequest.Status.OrderPlaced.toString(), cart);
            Order.ordersList.add(order);
            processTransaction(cart);
            DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
            model.setRowCount(0);
            JOptionPane.showMessageDialog(this, "Thank you for your purchase, Looking forward to see you again");
            DeliveryWorkRequest deliveryRequest = new DeliveryWorkRequest();
            deliveryRequest.setMessage("Please deliver the package to the customer.");
            deliveryRequest.setSender(account);
            deliveryRequest.setStatus(DeliveryWorkRequest.Status.OrderPlaced.toString());
            deliveryRequest.setDeliveryAddress(account.getPerson().getaddress());
            deliveryRequest.setCustomerName(account.getUsername());
            deliveryRequest.setOrder(order);
            ArrayList<Network> networkList = business.getNetworkList();
            for (Network network : networkList) {
                ArrayList<Enterprise> enterpriseList = network.getEnterpriseDirectory().getEnterpriseList();
                for (Enterprise enterprise : enterpriseList) {
                    if (enterprise instanceof SalesAndDeliveryEnterprise) {
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganisationList()) {
                            if (organization instanceof DeliveryOrganization) {
                                organization.getWorkQueue().getWorkRequestList().add(deliveryRequest);
                                account.getWorkQueue().getWorkRequestList().add(deliveryRequest);

                            }
                        }
                    }
                }
            }
            SendEmail.sendEmail("harshitha.sappidi@gmail.com", cart, txttotalamount.getText());
            txttotalamount.setText(" ");
        } else {
            JOptionPane.showMessageDialog(this, "Your wallet balance is insufficient to complete this transaction. Please recharge your wallet.");
            for (Map.Entry<Integer, Product> entry : cart.getProductMap().entrySet()) {
                Product product = business.getProductDirectory().getProductFromProductID(entry.getKey());
                product.setQuantity(product.getQuantity() + cart.getProductMap().get(entry.getKey()).getQuantity());
            }
            cart.getProductMap().clear();
            populateTable();
            populateCartTable(cart);
            return;
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    public void processTransaction(Cart cart) {
        for (Map.Entry<Integer, Product> entry : cart.getProductMap().entrySet()) {
            Product product = entry.getValue();
            String farmersUserName = product.getFarmersId();
            double Amount = product.getPrice() * product.getQuantity();
            UserAccount user = business.getUserAccountDirectory().findUserByUserName(farmersUserName);
            int farmerId = user.getPerson().getPersonId();
            Person farmerPerson = business.getPersonDirectory().findPersonById(farmerId);

            farmerPerson.getWallet().addFunds(Amount);
            int personId = account.getPerson().getPersonId();
            Person deliveryPerson = business.getPersonDirectory().findPersonById(personId);

            deliveryPerson.getWallet().deductFunds(Amount);
            System.out.println(farmerPerson.getWallet().getBalance() + user.getUsername());
        }

    }
    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:

        if (checkout) {
            this.cart = new Cart(account.getUsername());
        }
        int selectedRowIndex = tblViewProducts.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select the product first.");
            return;
        }
        int productID = (int) tblViewProducts.getValueAt(selectedRowIndex, 0);
        Product product = business.getProductDirectory().getProductFromProductID(productID);
        int productQuantity = (Integer) spnQuantity.getValue();
        if (product.getQuantity() == 0) {
            JOptionPane.showMessageDialog(this, "The Product is currently Out of Stock. Please get back later!");
            return;
        } else if (productQuantity == 0) {
            JOptionPane.showMessageDialog(this, "Please increase the quantity.");
            return;
        } else if (productQuantity > product.getQuantity()) {
            JOptionPane.showMessageDialog(this, "The Quantity choosen is more than the available quantity. Please update the quantity.");
            return;
        } else {
            if (cart.getProductMap().containsKey(product.getProductId())) {
                Product prodFromMap = cart.getProductMap().get(product.getProductId());
                prodFromMap.setQuantity(prodFromMap.getQuantity() + productQuantity);
            } else {
                Product cartProduct = new Product(product.getProductId(), product.getProductname(), product.getOfferedPrice(), product.getQuantity());
                cartProduct.setQuantity(productQuantity);
                cartProduct.setFarmersId(product.getFarmersId());
                cartProduct.setCategory(product.getCategory());
                cart.addProduct(product.getProductId(), cartProduct);
            }
            ArrayList<Product> ProductList = business.getProductDirectory().getProductList();
            for (Product prod : ProductList) {
                if (prod.getProductId() == product.getProductId()) {
                    prod.setQuantity(prod.getQuantity() - productQuantity);
                }
            }
            populateTable();
            populateCartTable(cart);
            spnQuantity.setValue(0);
        }
    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        CustomerDashboardJPanel panel = new CustomerDashboardJPanel(userProcessContainer, account, business, network, enterprise);
        userProcessContainer.add("CustomerDashboardJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        populateTableByCategory();

    }//GEN-LAST:event_btnSearchActionPerformed

    private void populateTableByCategory() {
//        DefaultTableModel model = (DefaultTableModel) tblViewProducts.getModel();
//        model.setRowCount(0);
//        String Status = (String) StatusCmbBox.getSelectedItem();
//
//       // ArrayList<Product> ProductList = business.getProductDirectory().getProductList();
//       ArrayList<Product> productList = new ArrayList<>(business.getProductDirectory().getProductList());
//try {
//        for (Product product : productList) {
//            Product.Status status = product.getStatus();
//            if (status.toString().equalsIgnoreCase(Product.Status.REVIEWED.toString()) && product.getCategory().equals(Status)) {
//                Object[] row = new Object[7];
//                String productName = product.getName();
//                int productId = product.getProductId();
//                double price = product.getOfferedPrice();
//                int quantity = product.getQuantity();
//
//                double EstimationCost = business.getProductDirectory().calculateEstimationCost(price, quantity);
//
//                row[0] = productId;
//                row[1] = productName;
//                row[2] = price;
//                row[3] = quantity;
//                row[4] = product.getImage();
//                row[5] = product.getCategory();
//
//                model.addRow(row);
//                tblViewProducts.setRowHeight(150);
//
//            } else if (status.toString().equalsIgnoreCase(Product.Status.REVIEWED.toString()) && Status.equalsIgnoreCase("Price(low-high)")) {
//
//                Collections.sort(productList, Comparator.comparingDouble(Product::getOfferedPrice));
//                for (Product productLowToHigh : productList) {
//                    Object[] row = new Object[7];
//                    String productName = productLowToHigh.getName();
//                    int productId = productLowToHigh.getProductId();
//                    double price = productLowToHigh.getOfferedPrice();
//                    int quantity = productLowToHigh.getQuantity();
//
//                    double estimationCost = business.getProductDirectory().calculateEstimationCost(price, quantity);
//
//                    row[0] = productId;
//                    row[1] = productName;
//                    row[2] = price;
//                    row[3] = quantity;
//                    row[4] = productLowToHigh.getImage();
//                    row[5] = productLowToHigh.getCategory();
//
//                    model.addRow(row);
//                    tblViewProducts.setRowHeight(150);
//                }
//            } else if (status.toString().equalsIgnoreCase(Product.Status.REVIEWED.toString()) && Status.equalsIgnoreCase("Price(high-low)")) {
//                // Filter products by high to low price
//                Collections.sort(productList, Comparator.comparingDouble(Product::getOfferedPrice).reversed());
//                for (Product productHighToLow : productList) {
//                    Object[] row = new Object[7];
//                    String productName = productHighToLow.getName();
//                    int productId = productHighToLow.getProductId();
//                    double price = productHighToLow.getOfferedPrice();
//                    int quantity = productHighToLow.getQuantity();
//
//                    double estimationCost = business.getProductDirectory().calculateEstimationCost(price, quantity);
//
//                    row[0] = productId;
//                    row[1] = productName;
//                    row[2] = price;
//                    row[3] = quantity;
//                    row[4] = productHighToLow.getImage();
//                    row[5] = productHighToLow.getCategory();
//
//                    model.addRow(row);
//                    tblViewProducts.setRowHeight(150);
//                }
//            }
//            
//        } 
//}catch (ConcurrentModificationException e) {
//    // Handle the exception gracefully
//    e.printStackTrace(); // Or log the exception
//}
//
//
//            tblViewProducts.getColumnModel().getColumn(4).setCellRenderer(new ImageRenderer());
//            tblViewProducts.setModel(model);
//            tblViewProducts.setPreferredScrollableViewportSize(new Dimension(tblViewProducts.getPreferredScrollableViewportSize().width, 150));
//            tblViewProducts.revalidate();

        DefaultTableModel model = (DefaultTableModel) tblViewProducts.getModel();
        model.setRowCount(0);
        String statusFilter = (String) StatusCmbBox.getSelectedItem();

        ArrayList<Product> productList = new ArrayList<>(business.getProductDirectory().getProductList());

// Filter products based on status and category
        List<Product> filteredProducts = new ArrayList<>();
        for (Product product : productList) {
            if (product.getStatus().equals(Product.Status.REVIEWED) && product.getCategory().equals(statusFilter)) {
                filteredProducts.add(product);
            }
        }

// Sort filtered products based on price
        if (statusFilter.equalsIgnoreCase("Price(low-high)")) {
            Collections.sort(filteredProducts, Comparator.comparingDouble(Product::getOfferedPrice));
        } else if (statusFilter.equalsIgnoreCase("Price(high-low)")) {
            Collections.sort(filteredProducts, Comparator.comparingDouble(Product::getOfferedPrice).reversed());
        }

// Add filtered and sorted products to the table model
        for (Product product : filteredProducts) {
            Object[] row = new Object[7];
            row[0] = product.getProductId();
            row[1] = product.getName();
            row[2] = product.getOfferedPrice();
            row[3] = product.getQuantity();
            row[4] = product.getImage();
            row[5] = product.getCategory();
            model.addRow(row);
            tblViewProducts.setRowHeight(150);
        }

        tblViewProducts.getColumnModel().getColumn(4).setCellRenderer(new ImageRenderer());
        tblViewProducts.setModel(model);
        tblViewProducts.setPreferredScrollableViewportSize(new Dimension(tblViewProducts.getPreferredScrollableViewportSize().width, 150));
        tblViewProducts.revalidate();

    }


    private void StatusCmbBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusCmbBoxActionPerformed

    }//GEN-LAST:event_StatusCmbBoxActionPerformed

    private void populateCartTable(Cart cart) {
        DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
        model.setRowCount(0);
        Double totalAmount = 0.0;
        for (Map.Entry<Integer, Product> entry : cart.getProductMap().entrySet()) {
            Product product = entry.getValue();
            Object row[] = new Object[5];
            row[0] = product.getProductId();
            row[1] = product.getProductname();
            row[2] = product.getPrice();
            row[3] = product.getQuantity();
            row[4] = product.getQuantity() * product.getPrice();
            model.addRow(row);
            totalAmount += product.getQuantity() * product.getPrice();

        }
        txttotalamount.setText(totalAmount.toString());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> StatusCmbBox;
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblItemsInCart;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lbltotalamount;
    private javax.swing.JSpinner modifyQuantity;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblViewProducts;
    private javax.swing.JTextField txttotalamount;
    // End of variables declaration//GEN-END:variables

}
